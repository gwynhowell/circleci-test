version: 2.0
jobs:
  build:
    working_directory: ~/ahr
    docker:
      #- image: circleci/python:2.7
      - image: appogeehr/cci-gaepython:0.4
    steps:
      - checkout
      - run:
          name: Setup Environment Variables
          command: |
            GAE_PATH=~/google-cloud-sdk/platform/google_appengine
            echo export PYTHONPATH=${PYTHONPATH}:$GAE_PATH:$GAE_PATH/lib/webapp2-2.5.2:$GAE_PATH/lib/webob-1.2.3:$GAE_PATH/lib/yaml-3.10:$GAE_PATH/lib/jinja2-2.6:${HOME}/ahr/src/lib >> $BASH_ENV
            echo export PATH=$PATH:/home/circleci/.local/bin >> $BASH_ENV
            # source /home/circleci/.bashrc

      - restore_cache:
          keys:
            - pip-packages-v2

      - run:
          name: Install Pips
          command: |
            pip install --upgrade pip
            # pip install python-coveralls pycrypto MySQL-python nose --user
            pip install pycrypto MySQL-python nose --user

      - save_cache:
          paths:
            - ~/.local/bin
          key: pip-packages-v2

      # - run:
      #     name: Install Gems
      #     command: |
      #       # gem update --system
      #       sudo gem install sass compass

      # - run:
      #     name: Install npm's
      #     command: |
      #       npm install -g karma karma-mocha karma-requirejs karma-chai karma-chrome-launcher karma-firefox-launcher karma-junit-reporter
      - run:
          name: Run tests
          command: |
            mkdir ~/artifacts
            #PATH=$PATH:/home/circleci/.local/bin
            #source ~/.bashrc

            nosetests tests --with-xunit --xunit-file ~/artifacts/nosetests.xml
            # - nosetests tests src/appogee/tests -v --with-coverage --with-xunit --xunit-file $CIRCLE_TEST_REPORTS/nosetests.xml
      - store_test_results:
          path: ~/artifacts
      - store_artifacts:
          path: ~/artifacts

  print:
    docker:
      - image: circleci/python:2.7
    steps:
      - run:
          name: The First Step
          command: |
            echo 'Hello World!'
            echo 'This is the delivery pipeline'
      - run:
          name: Code Has Arrived
          command: |
            ls -al
            echo '^^^That should look familiar^^^'

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - print:
          requires:
            - build
